import type { ReactElement } from 'react';

function LongestPalindromicSubstring(): ReactElement {
  return (
    <>
      <p className="mb-2">
        Создадим переменную <code>result</code>, которую будем возвращать из функции, и{' '}
        <code>substr</code>, которая будет содержать в себе текущую палиндромную
        подстроку. Пройдём циклом по строке.
      </p>
      <p className="mb-2">
        На каждой итерации очищаем <code>substr</code>. Для того, чтобы определить,
        является ли подстрока палиндромной, нам потребуются два указателя{' '}
        <code>left</code> и <code>right</code>, которые изначально будут указывать на
        текущий символ.
      </p>
      <p className="mb-2">
        Запустим первый цикл <code>while</code>, который будет искать палиндромные
        подстроки нечётной длины, центром которых является текущий символ. Он будет
        исполняться, пока указатели указывают на одинаковые символы и не вышли за пределы
        строки. На первой итерации запишем в <code>substr</code> <code>s[i]</code> (потому
        что подстрока из одного символа является палиндромной), на последующих итерациях
        будем добавлять в начало и конец <code>substr</code> символы, на которые указывают
        указатели. Если длина <code>result</code> меньше, чем длина текущей палиндромной
        подстроки, то запишем в <code>result</code> текущую подстроку. В конце каждой
        итерации передвинем указатели.
      </p>
      <p className="mb-2">
        Для того, чтобы найти палиндромные подстроки чётной длины, центром которых
        являются текущий и следующий символы, сбросим <code>substr</code> и переместим
        указатели <code>left</code> и <code>right</code> на <code>i</code> и{' '}
        <code>i + 1</code> соответственно. После этого запустим второй цикл{' '}
        <code>while</code>, который будет исполняться, пока указатели указывают на
        одинаковые символы и не вышли за пределы строки. Логика внутри цикла точно такая
        же, как и в первом цикле <code>while</code>, за исключением того, что мы сразу
        записываем в <code>substr</code>{' '}
        <code>`$&#123;s[left]&#125;$&#123;substr&#125;$&#123;s[right]&#125;`</code>.
      </p>
      <p className="mb-2">
        После прохождения по строке вернём <code>result</code> из функции.
      </p>
    </>
  );
}

export default LongestPalindromicSubstring;
