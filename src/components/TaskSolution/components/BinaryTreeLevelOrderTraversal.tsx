import { Link } from 'react-router-dom';
import type { ReactElement } from 'react';

function BinaryTreeLevelOrderTraversal(): ReactElement {
  return (
    <>
      <p className="mb-2">
        Для решения этой задачи нам отлично подходит алгоритм поиска в ширину. Он
        реализуется с помощью структуры данных «очередь», которой нет в языке JavaScript.
        Напишем реализацию сами, но не будем заострять на ней внимание. Подробнее про
        очереди можно почитать{' '}
        <Link
          to="/subjects/queues"
          className="focus-visible:font-semibold focus-visible:outline-0 hover:font-semibold text-blue-500"
        >
          тут
        </Link>
        .
      </p>
      <p className="mb-2">
        В функции <code>levelOrder</code> создадим очередь <code>queue</code> и массив{' '}
        <code>result</code>, который будем возвращать из функции. На каждой итерации цикла{' '}
        <code>while</code> мы будем доставать из очереди узлы, которые относятся к
        текущему уровню, и добавлять в очередь дочерние узлы этих узлов, которые будут
        образовывать следующий уровень. Сразу добавим в очередь корневой узел, потому что
        он составляет первый уровень.
      </p>
      <p className="mb-2">
        Пройдём циклом <code>while</code> по нашей очереди, пока она не опустеет. Сохраним
        текущий размер очереди и создадим массив <code>level</code>, в котором будем
        хранить значения, относящиеся к текущему уровню. Запустим вложенный цикл{' '}
        <code>for</code>, который будет исполняться столько раз, сколько узлов находятся
        на текущем уровне. На каждой итерации цикла <code>for</code> достаём из очереди
        узел, и если он не равен <code>null</code>, добавляем его значение в{' '}
        <code>level</code>, а его дочерние узлы в очередь. Очередь дойдёт до этих узлов
        уже на следующей итерации цикла <code>while</code>, когда будет рассматриваться
        следующий уровень.
      </p>
      <p className="mb-2">
        После того, как мы пройдём по всем узлам текущего уровня, добавляем{' '}
        <code>level</code> в <code>result</code>, если <code>level</code> не был пустым.
      </p>
      <p className="mb-2">
        Когда очередь станет пустой, цикл <code>while</code> завершит работу. Это будет
        означать, что мы прошли по всем узлам в дереве и можем вернуть <code>result</code>
        .
      </p>
    </>
  );
}

export default BinaryTreeLevelOrderTraversal;
