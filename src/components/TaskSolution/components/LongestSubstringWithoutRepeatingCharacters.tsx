import type { ReactElement } from 'react';

function LongestSubstringWithoutRepeatingCharacters(): ReactElement {
  return (
    <>
      <p className="mb-2">
        Для решения этой задачи отлично подходит <code>Set</code>. Будем хранить в нём
        элементы, которые расположены между двумя указателями <code>l</code> и{' '}
        <code>r</code> включительно. Воспользуемся методом скользящего окна, будем
        расширять его, пока не встретим букву, которая уже есть в окне.
      </p>
      <p className="mb-2">
        Пройдём циклом по массиву. На каждой итерации во внутреннем цикле{' '}
        <code>while</code> проверяем, есть ли в нашем окне текущая буква. Если мы встретим
        такую букву, то будем удалять из <code>Set</code> её и все буквы, которые шли до
        неё, передвигая левый указатель. Затем добавляем в <code>Set</code> текущую букву
        и записываем в <code>result</code> максимальное значение между <code>result</code>{' '}
        и текущим размером окна.
      </p>
      <p className="mb-2">
        Цикл <code>while</code> не выполняет <i>n</i> итераций на каждой итерации цикла{' '}
        <code>for</code>, он выполнит <i>n</i> итераций всего. Поэтому цикл в цикле не
        приведёт к сложности по времени <i>O</i>(<i>n</i>
        <sup>2</sup>).
      </p>
      <p className="mb-2">
        В итоге в <code>result</code> и будет храниться длина самой длинной подстроки без
        дубликатов, возвращаем его.
      </p>
    </>
  );
}

export default LongestSubstringWithoutRepeatingCharacters;
