import type { ReactElement } from 'react';

function CourseSchedule2(): ReactElement {
  return (
    <>
      <p className="mb-2">
        Создадим <code>Map</code> <code>preMap</code>, в которой ключами будут курсы, а
        значениями — массив курсов, которые необходимо пройти перед прохождением этого
        курса (назовём их подготовительными курсами). Заполним <code>preMap</code>. Также
        создадим <code>Set</code> <code>visited</code>, который будет хранить курсы,
        которые мы прошли, <code>Set</code> <code>cycle</code>, который будет хранить
        курсы текущего пути, и массив <code>result</code>.
      </p>
      <p className="mb-2">
        Напишем вспомогательную рекурсивную функцию <code>dfs</code>, которая будет
        проходить по всем подготовительным курсам и возвращать булево значение,
        обозначающее, можем ли мы закончить текущий курс. Если текущий курс есть в{' '}
        <code>cycle</code>, то мы обнаружили цикл — возвращаем <code>false</code>. Если
        текущий курс есть в <code>visited</code>, то мы его уже завершили — возвращаем{' '}
        <code>true</code>. Добавим курс в <code>cycle</code>, после чего рекурсивно
        вызовем функцию <code>dfs</code> для подготовительных курсов, и если хоть один из
        этих вызовов вернёт <code>false</code>, то мы не можем пройти текущий курс, также
        вернём <code>false</code>. Если функция до сих пор не завершила свою работу, то
        удалим текущий курс из <code>cycle</code>, добавим его в <code>visited</code> и{' '}
        <code>result</code> и вернём <code>true</code>.
      </p>
      <p className="mb-2">
        Пройдём по всем курсам в цикле <code>for</code>, на каждой итерации будем вызывать{' '}
        <code>dfs</code> для текущего курса. Если на какой-либо итерации <code>dfs</code>{' '}
        вернёт <code>false</code>, то вернём пустой массив из функции. Если цикл завершил
        свою работу, то вернём <code>result</code>.
      </p>
    </>
  );
}

export default CourseSchedule2;
