import { Link } from 'react-router-dom';
import type { ReactElement } from 'react';

function ShortestPathInBinaryMatrix(): ReactElement {
  return (
    <>
      <p className="mb-2">
        Для решения этой задачи нам отлично подходит алгоритм поиска в ширину. Он
        реализуется с помощью структуры данных «очередь», которой нет в языке JavaScript.
        Напишем реализацию сами, но не будем заострять на ней внимание. Подробнее про
        очереди можно почитать{' '}
        <Link
          to="/subjects/queues"
          className="focus-visible:font-semibold focus-visible:outline-0 hover:font-semibold text-blue-500"
        >
          тут
        </Link>
        . Создадим также массив <code>DIRECTIONS</code>, который содержит в себе все
        направления, в которых мы можем двигаться из ячейки.
      </p>
      <p className="mb-2">
        Запишем размер матрицы в <code>n</code> (матрица квадратная, поэтому количество
        строк и столбцов одинаковое). Создадим очередь <code>queue</code>, в которую будем
        помещать координаты ячеек и длину пути до них, и <code>Set</code>{' '}
        <code>visited</code>, который будет хранить координаты посещённых ячеек. Добавим в
        очередь и <code>Set</code> первую ячейку.
      </p>
      <p className="mb-2">
        Запустим цикл <code>while</code> до тех пор, пока в очереди есть ячейки. На каждой
        итерации будем доставать координаты ячейки и длину пути до неё из очереди. Если
        координаты вышли за пределы сетки, либо по этим координатам в сетке хранится
        единица, то переходим к следующей итерации. Если координаты указывают на последнюю
        ячейку, то вернём длину пути до этой ячейки. Если оба условия не выполнились, то
        пройдём по всем возможным направлениям для нашей ячейки, и, если новые координаты
        ещё не были посещены, то добавим их в очередь и пометим их посещёнными.
      </p>
      <p className="mb-2">
        Если цикл <code>while</code> завершил свою работу, то это означает, что пути не
        существует, вернём <code>-1</code>.
      </p>
    </>
  );
}

export default ShortestPathInBinaryMatrix;
