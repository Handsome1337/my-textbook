import type { ReactElement } from 'react';

function DesignHashSet(): ReactElement {
  return (
    <>
      <p className="mb-2">
        Для решения проблемы коллизий мы будем использовать метод цепочек, для реализации
        которого нам понадобятся связные списки. Создадим класс <code>ListNode</code> для
        узла списка.
      </p>
      <p className="mb-2">
        Создадим массив <code>set</code>, в котором мы будем хранить связные списки
        элементов. В задаче сказано, что максимум будет выполнено 10<sup>4</sup> вставок,
        поэтому зададим массиву такую длину, и заполним его фиктивными узлами. Также
        создадим приватный метод <code>#getNodeByKey</code>, который будет находить
        связный список по ключу с помощью оператора остатка от деления.
      </p>
      <p className="mb-2">
        В каждом из оставшихся методов мы будем находить список по ключу и проходить по
        нему циклом, проверяя следующий элемент (потому что в начале списков у нас
        фиктивные узлы). В методе <code>add</code>, если мы нашли элемент с переданным
        ключом — ничего не делаем, иначе добавляем в список новый узел с этим ключом. В{' '}
        <code>remove</code>, если мы нашли искомый элемент, удаляем его из связного
        списка.
      </p>
    </>
  );
}

export default DesignHashSet;
