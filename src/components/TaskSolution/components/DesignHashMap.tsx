import type { ReactElement } from 'react';

function DesignHashMap(): ReactElement {
  return (
    <>
      <p className="mb-2">
        Для решения проблемы коллизий мы будем использовать метод цепочек, для реализации
        которого нам понадобятся связные списки. Создадим класс <code>ListNode</code> для
        узла списка.
      </p>
      <p className="mb-2">
        Создадим массив <code>map</code>, в котором мы будем хранить связные списки
        элементов. В задаче сказано, что максимум будет выполнено 10<sup>4</sup> вставок,
        поэтому зададим массиву такую длину, и заполним его фиктивными узлами. Также
        создадим приватный метод <code>#getNodeByKey</code>, который будет находить
        связный список по ключу с помощью оператора остатка от деления.
      </p>
      <p className="mb-2">
        В каждом из оставшихся методов мы будем находить список по ключу и проходить по
        нему циклом. В методах <code>put</code> и <code>remove</code> мы будем проверять
        следующий элемент, так мы пропустим фиктивный узел в начале цикла и сохраним
        ссылку на последний узел после окончания цикла. В методе <code>put</code>, если мы
        нашли элемент с переданным ключом — перезаписываем его <code>value</code>, иначе
        добавляем в список новый узел с этой парой ключ/значение. В <code>remove</code>,
        если мы нашли искомый элемент, удаляем его из связного списка. В методе{' '}
        <code>get</code> мы начнем сразу со второго элемента списка и будем проверять
        каждый текущий элемент, потому что нам не нужно сохранять ссылку на последний
        элемент списка после окончания цикла.
      </p>
    </>
  );
}

export default DesignHashMap;
