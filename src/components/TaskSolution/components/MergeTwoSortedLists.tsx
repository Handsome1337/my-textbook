import type { ReactElement } from 'react';

function MergeTwoSortedLists(): ReactElement {
  return (
    <>
      <p className="mb-2">
        Создадим новый связный список, который будет состоять из одного фиктивного узла, и
        указатель <code>tail</code>, который будет указывать на этот узел.
      </p>
      <p className="mb-2">
        Запустим цикл <code>while</code>, который будет выполняться, пока в обоих
        переданных списках есть узлы. На каждой итерации проверяем, является ли значение
        узла в первом списке меньшим, чем во втором. Если является, то перемещаем
        указатель <code>tail.next</code> на этот список, добавляя тем самым узел этого
        списка, и переходим на следующий узел в списке: <code>list1 = list1.next</code>.
        Если не является, то производим аналогичные действия со вторым списком. В конце
        итерации перемещаем указатель <code>tail</code> на только что добавленный узел, на
        который указывает <code>tail.next</code>.
      </p>
      <p className="mb-2">
        Цикл закончится, когда в одном из списков не останется узлов. Это означает, что в
        списке, в котором остались узлы, все узлы больше, чем узлы, которые мы уже
        объединили в один список. Поэтому мы можем просто переместить указатель{' '}
        <code>tail.next</code> на оставшийся список.
      </p>
      <p className="mb-2">
        Так как наш объединённый список начинается с фиктивного узла, мы можем вернуть из
        функции <code>dummyNode.next</code>, чтобы избавиться от него и получить желаемый
        список.
      </p>
    </>
  );
}

export default MergeTwoSortedLists;
